1: en : ï»¿#If Server Or ThickClientOrdinaryApplication Or ExternalConnection Then: %1
2: en : : %1
3: en : ////////////////////////////////////////////////////////////////////////////////: %1
4: en : // USED VARIABLE NAME ABBREVIATIONS (ABBREVIATONS): %1
5: en : //: %1
6: en : //  OCR  - objects conversion rule.: %1
7: en : //  PCR  - object properties conversion rule.: %1
8: en : //  PGCR - object properties group conversion rule.: %1
9: en : //  VCR  - object values conversion rule.: %1
10: en : //  DDR  - data export rule.: %1
11: en : //  DCR  - data clearing rule.: %1
12: en : : %1
13: en : ////////////////////////////////////////////////////////////////////////////////: %1
14: en : // EXPORT VARIABLES: %1
15: en : : %1
16: en : Var EventLogMonitorMessageKey Export; // message string for writing errors to the events log monitor.: %1
17: en : Var ExternalConnection Export; // Contains external connection global context or Undefined.: %1
18: en : Var Queries Export; // Structure containing used queries.: %1
19: en : : %1
20: en : ////////////////////////////////////////////////////////////////////////////////: %1
21: en : // HELPER MODULE VARIABLES FOR ALGORITHMS WRITING (COMMON FOR EXPORT AND UPLOAD): %1
22: en : : %1
23: en : Var Conversion; // Conversion properties structure (Name, Id, exchange event handlers).: %1
24: en : : %1
25: en : Var Algorithms; // Structure containing used algorithms.: %1
26: en : Var AdditionalInformationProcessors; // Structure containing used external data processors.: %1
27: en : : %1
28: en : Var Rules; // Structure containing references to OCR.: %1
29: en : : %1
30: en : Var Managers; // Match containing the fields Name, TypeName, RefTypeAsString, Manager, MDObject, ORC.: %1
31: en : Var ManagersForExchangePlans;: %1
32: en : : %1
33: en : Var AdditionalInformationProcessorParameters; // Structure containing parameters using external data processors.: %1
34: en : : %1
35: en : Var ParametersInitialized; // If True, then required conversion parameters are initialized.: %1
36: en : : %1
37: en : Var DataLogFile; // File for keeping data exchange protocol.: %1
38: en : Var CommentObjectProcessingFlag;: %1
39: en : : %1
40: en : ////////////////////////////////////////////////////////////////////////////////: %1
41: en : // HANDLERS DEBUG VARIABLES: %1
42: en : : %1
43: en : Var ImportingHandling;: %1
44: da : Var ImportProcessing;: %1
45: en : : %1
46: en : ////////////////////////////////////////////////////////////////////////////////: %1
47: en : // CHECK BOX OF GLOBAL DATA PROCESSORS PRESENSE: %1
48: en : : %1
49: en : Var HasBeforeObjectExportGlobalHandler;: %1
50: en : Var HasAfterObjectExportGlobalHandler;: %1
51: en : : %1
52: en : Var HasBeforeConvertObjectGlobalHandler;: %1
53: en : : %1
54: en : Var HasBeforeObjectImportGlobalHandler;: %1
55: en : Var HasAftertObjectImportGlobalHandler;: %1
56: en : : %1
57: en : ////////////////////////////////////////////////////////////////////////////////: %1
58: en : // VARIABLES THAT ARE USED IN EXCHANGE HANDLERS (BOTH FOR IMPORT AND EXPORT): %1
59: en : : %1
60: en : Var StringType;                  // Type("String"): %1
61: la : Var BooleanType;                  // Type("Boolean"): %1
62: en : Var NumberType;                   // Type("Number"): %1
63: en : Var DateType;                    // Type("Date"): %1
64: en : Var UUIDType;                    // Type("UUID"): %1
65: en : Var ValueStorageType;       // Type("ValueStorage"): %1
66: en : Var BinaryDataType;          // Type("BinaryData"): %1
67: en : Var AccumulationRecordTypeType;   // Type("AccrualMovementKind"): %1
68: en : Var ObjectDeletionType;         // Type("ObjectRemoval"): %1
69: en : Var AccountTypeKind;                // Type("AccountType"): %1
70: no : Var TypeType;                     // Type("Type"): %1
71: en : Var MapType;            // Type("Map").: %1
72: en : Var String36Type;: %1
73: en : Var String255Type;: %1
74: en : : %1
75: en : Var MapRegisterType;: %1
76: en : : %1
77: en : Var XMLNodeTypeEndElement;: %1
78: en : Var XMLNodeTypeStartElement;: %1
79: en : Var XMLNodeTypeText;: %1
80: en : : %1
81: en : Var EmptyDateValue;: %1
82: en : : %1
83: en : Var ErrorMessages; // Matching. Key - error code, Value - error description.: %1
84: en : : %1
85: en : ////////////////////////////////////////////////////////////////////////////////: %1
86: en : // EXPORT DATA PROCESSOR MODULE VARIABLES: %1
87: en :  : %1
88: en : Var SnCounter;   // Number - NPP counter: %1
89: en : Var WrittenToFileNPP;: %1
90: en : Var PropertyConversionRuleTable;      // ValueTable - template to create table: %1
91: en :                                             //                   structure by copying.: %1
92: en : Var XMLRules;                           // Xml-String containing exchange rules description.: %1
93: en : Var TypesForTargetString;: %1
94: en : Var DocumentsForDeferredPostingField; // Values table for documents posting after data import.: %1
95: en : Var DocumentsMatchForDeferredPosting; // Match for storing documents: %1
96: en :                                                       // additional properties after data import.: %1
97: en : Var FieldObjectsForPostponedRecording; // Match for writing objects of the reference types after data import.: %1
98: en : Var ExchangeFile; // Consistently written/read exchange file.: %1
99: en : : %1
100: en : ////////////////////////////////////////////////////////////////////////////////: %1
101: en : // VARIABLES OF UPLOAD DATA PROCESSOR MODULE: %1
102: en :  : %1
103: en : Var DeferredDocumentRegisterRecordCount;: %1
104: en : Var ExchangeFileAttributes;       // Structure. After opening the file, it contains exchange file attributes according to the format.: %1
105: en : Var LastSearchByRefNumber;: %1
106: en : Var StoredExportedObjectCountByTypes;: %1
107: en : Var AdditionalSearchParameterMap;: %1
108: en : Var TypeAndObjectNameMap;: %1
109: en : Var EmptyTypeValueMap;: %1
110: en : Var TypeDescriptionMap;: %1
111: en : Var ConversionRulesMap;                            // Match to determine object conversion rule by the object type.: %1
112: en : Var MessageNumberField;: %1
113: en : Var ReceivedMessageNumberField;: %1
114: en : Var EnableDocumentPosting;: %1
115: en : Var DataExportCallStack;: %1
116: en : Var GlobalNotWrittenObjectStack;: %1
117: en : Var DataMapForExportedItemUpdate;: %1
118: en : Var DeferredDocumentActionExecutionStartDate;: %1
119: en : Var DeferredDocumentActionExecutionEndDate;: %1
120: en : Var EventsAfterParameterImport;: %1
121: en : Var ObjectMappingRegisterManager;: %1
122: en : Var CurrentNestingLevelExportByRule;: %1
123: en : Var VisualExchangeSetupMode;: %1
124: en : Var ExchangeRuleInfoImportMode;: %1
125: en : Var SearchFieldInfoImportResultTable;: %1
126: en : Var CustomSearchFieldInfoOnDataExport;: %1
127: en : Var CustomSearchFieldInfoOnDataImport;: %1
128: en : Var InfobaseObjectMappingQuery;: %1
129: en : Var HasObjectChangeRecordDataAdjustment;: %1
130: en : Var HasObjectChangeRecordData;: %1
131: en : : %1
132: en : Var DataImportDataProcessorField;: %1
133: en : : %1
134: en : ////////////////////////////////////////////////////////////////////////////////: %1
135: en : // VARIABLES FOR PROPERTY VALUES: %1
136: en : : %1
137: en : Var ErrorFlagField;: %1
138: en : Var ExchangeResultField;: %1
139: en : Var DataExchangeStatusField;: %1
140: en : : %1
141: en : Var ExchangeMessageDataTableField;  // Match with data value tables from exchange message; : %1
142: en : 										 // Key - TypeName (String); Value - table with objects data (ValuesTable).: %1
143: en : //: %1
144: en : Var PackageHeaderDataTableField; // Values table with data from file of exchange messages pack title.: %1
145: en : Var ErrorMessageStringField; // String - variable contains string with error message.: %1
146: en : //: %1
147: en : Var DataForImportTypeMapField;: %1
148: en : : %1
149: en : Var ImportedObjectCounterField; // Imported objects counter.: %1
150: en : Var ExportedObjectCounterField; // Exported objects counter.: %1
151: en : : %1
152: en : Var ExchangeResultPrioritiesField; // Array - priorities of the data exchange from high to low.: %1
153: en : : %1
154: en : Var ObjectPropertyDescriptionTableField; // Map: Key - MetadataObject; Value - ValueTable -: %1
155: en :                                           // table of metadata object properties description.: %1
156: en : : %1
157: en : Var ExportedByRefObjectsField; // Array of objects exported by reference. Array items are unique.: %1
158: en : Var FieldObjectsCreatedAtImporting; // Array of objects created during export. Array items are unique.: %1
159: en : : %1
160: en : Var ExportedByRefMetadataObjectsField; // Cache) Map: Key - MetadataObject; Value - shows: %1
161: en :                                                 // that object was exported by ref: True - you should export: %1
162: en :                                                 // object by ref, False - you should not.: %1
163: en : : %1
164: en : Var ObjectChangeRecordRulesField; // Cache) ValuesTable - contains objects registration rules: %1
165: en :                                       // (rules only with the "Allowed objects filter" kind for the current exchange plan).: %1
166: en : : %1
167: en : Var ExchangePlanNameField;: %1
168: en : : %1
169: en : Var ExchangePlanNodePropertyField;: %1
170: en : : %1
171: en : Var IncomingExchangeMessageFormatVersionField;: %1
172: en : : %1
173: en : ////////////////////////////////////////////////////////////////////////////////: %1
174: en : // EXPORT PROPERTIES: %1
175: en : : %1
176: en : #Region ServiceProceduresAndFunctions: %1
177: en : : %1
178: en : // Function-property: check box showing data exchange execution.: %1
179: en : //: %1
180: en : // Returns:: %1
181: en : //  Boolean - check box of data exchange error.: %1
182: en : //: %1
183: en : Function ErrorFlag() Export: %1
184: en : 	: %1
185: en : 	If TypeOf(ErrorFlagField) <> Type("Boolean") Then: %1
186: en : 		: %1
187: en : 		ErrorFlagField = False;: %1
188: en : 		: %1
189: cy : 	EndIf;: %1
190: en : 	: %1
191: en : 	Return ErrorFlagField;: %1
192: en : 	: %1
193: en : EndFunction: %1
194: en : : %1
195: en : // Function-property: result of the data exchange.: %1
196: en : //: %1
197: en : // Returns:: %1
198: en : //  EnumRef.ExchangeExecutionResult - data exchange result.: %1
199: en : //: %1
200: en : Function ExchangeProcessResult() Export: %1
201: en : 	: %1
202: en : 	If TypeOf(ExchangeResultField) <> Type("EnumRef.ExchangeExecutionResult") Then: %1
203: en : 		: %1
204: en : 		ExchangeResultField = Enums.ExchangeExecutionResult.Completed;: %1
205: en : 		: %1
206: cy : 	EndIf;: %1
207: en : 	: %1
208: en : 	Return ExchangeResultField;: %1
209: en : 	: %1
210: en : EndFunction: %1
211: en : : %1
212: en : // Function-property: result of the data exchange.: %1
213: en : //: %1
214: en : // Returns:: %1
215: en : //  String - String presentation of the EnumRef.ExchangeExecutionResult enumeration value.: %1
216: en : //: %1
217: en : Function ExchangeExecutionResultString() Export: %1
218: en : 	: %1
219: en : 	Return CommonUse.NameOfEnumValue(ExchangeProcessResult());: %1
220: en : 	: %1
221: en : EndFunction: %1
222: en : : %1
223: en : // Function property: number of the data exchange received message.: %1
224: en : //: %1
225: en : // Returns:: %1
226: en : //  Number - number of the data exchange received message.: %1
227: en : //: %1
228: en : Function ReceivedMessageNumber() Export: %1
229: en : 	: %1
230: en : 	If TypeOf(ReceivedMessageNumberField) <> Type("Number") Then: %1
231: en : 		: %1
232: en : 		ReceivedMessageNumberField = 0;: %1
233: en : 		: %1
234: cy : 	EndIf;: %1
235: en : 	: %1
236: en : 	Return ReceivedMessageNumberField;: %1
237: en : 	: %1
238: en : EndFunction: %1
239: en : : %1
240: en : // Function-property: match to tables of the incoming message exchange data: %1
241: en : //: %1
242: en : // Returns:: %1
243: en : //  Map - match with data tables of incoming exchange message.: %1
244: en : //: %1
245: en : Function DataTablesOfExchangeMessage() Export: %1
246: en : 	: %1
247: en : 	If TypeOf(ExchangeMessageDataTableField) <> Type("Map") Then: %1
248: en : 		: %1
249: en : 		ExchangeMessageDataTableField = New Map;: %1
250: en : 		: %1
251: cy : 	EndIf;: %1
252: en : 	: %1
253: en : 	Return ExchangeMessageDataTableField;: %1
254: en : 	: %1
255: en : EndFunction: %1
256: en : : %1
257: en : // Function-property: values table with statistical and additional information about exchange incoming message.: %1
258: en : //: %1
259: en : // Returns:: %1
260: en : //  ValueTable - values table with statistical and additional information about incoming exchange message.: %1
261: en : //: %1
262: en : Function DataTableOfPackageHeader() Export: %1
263: en : 	: %1
264: en : 	If TypeOf(PackageHeaderDataTableField) <> Type("ValueTable") Then: %1
265: en : 		: %1
266: en : 		PackageHeaderDataTableField = New ValueTable;: %1
267: en : 		: %1
268: en : 		Columns = PackageHeaderDataTableField.Columns;: %1
269: en : 		: %1
270: en : 		Columns.Add("ObjectTypeAsString",            deDescriptionType("String"));: %1
271: en : 		Columns.Add("ObjectsCountInSource", deDescriptionType("Number"));: %1
272: en : 		Columns.Add("SearchFields",                   deDescriptionType("String"));: %1
273: en : 		Columns.Add("TableFields",                  deDescriptionType("String"));: %1
274: en : 		: %1
275: en : 		Columns.Add("SourceTypeAsString", deDescriptionType("String"));: %1
276: en : 		Columns.Add("ReceiverTypeAsString", deDescriptionType("String"));: %1
277: en : 		: %1
278: en : 		Columns.Add("SynchronizeByID", deDescriptionType("Boolean"));: %1
279: en : 		Columns.Add("ThisIsObjectDeletion", deDescriptionType("Boolean"));: %1
280: en : 		Columns.Add("IsClassifier", deDescriptionType("Boolean"));: %1
281: en : 		Columns.Add("UsePreview", deDescriptionType("Boolean"));: %1
282: en : 		: %1
283: cy : 	EndIf;: %1
284: en : 	: %1
285: en : 	Return PackageHeaderDataTableField;: %1
286: en : 	: %1
287: en : EndFunction: %1
288: en : : %1
289: en : // Function-property: row containing an error message on data exchange.: %1
290: en : //: %1
291: en : // Returns:: %1
292: en : //  String - String containing a message on error occurred while data exchange.: %1
293: en : //: %1
294: en : Function ErrorMessageString() Export: %1
295: en : 	: %1
296: en : 	If TypeOf(ErrorMessageStringField) <> Type("String") Then: %1
297: en : 		: %1
298: en : 		ErrorMessageStringField = "";: %1
299: en : 		: %1
300: cy : 	EndIf;: %1
301: en : 	: %1
302: en : 	Return ErrorMessageStringField;: %1
303: en : 	: %1
304: en : EndFunction: %1
305: en : : %1
306: en : // Function-property: quantity of objects that were imported.: %1
307: en : //: %1
308: en : // Returns:: %1
309: en : //  Number - objects quantity that were imported.: %1
310: en : //: %1
311: en : Function CounterOfImportedObjects() Export: %1
312: en : 	: %1
313: en : 	If TypeOf(ImportedObjectCounterField) <> Type("Number") Then: %1
314: en : 		: %1
315: en : 		ImportedObjectCounterField = 0;: %1
316: en : 		: %1
317: cy : 	EndIf;: %1
318: en : 	: %1
319: en : 	Return ImportedObjectCounterField;: %1
320: en : 	: %1
321: en : EndFunction: %1
322: en : : %1
323: en : // Function-property: quantity of objects that were exported.: %1
324: en : //: %1
325: en : // Returns:: %1
326: en : //  Number - objects quantity that were exported.: %1
327: en : //: %1
328: en : Function DumpedObjectsCounter() Export: %1
329: en : 	: %1
330: en : 	If TypeOf(ExportedObjectCounterField) <> Type("Number") Then: %1
331: en : 		: %1
332: en : 		ExportedObjectCounterField = 0;: %1
333: en : 		: %1
334: cy : 	EndIf;: %1
335: en : 	: %1
336: en : 	Return ExportedObjectCounterField;: %1
337: en : 	: %1
338: en : EndFunction: %1
339: en : : %1
340: en : ////////////////////////////////////////////////////////////////////////////////: %1
341: en : // INTERNAL PROPERTIES: %1
342: en : : %1
343: en : Function DataProcessorForDataImport(): %1
344: en : 	: %1
345: en : 	Return DataImportDataProcessorField;: %1
346: en : 	: %1
347: en : EndFunction: %1
348: en : : %1
349: en : Function IsExchangeOverExternalConnection(): %1
350: en : 	: %1
351: en : 	Return DataProcessorForDataImport() <> Undefined;: %1
352: en : 	: %1
353: en : EndFunction: %1
354: en : : %1
355: en : Function DataExchangeStatus(): %1
356: en : 	: %1
357: en : 	If TypeOf(DataExchangeStatusField) <> Type("Structure") Then: %1
358: en : 		: %1
359: en : 		DataExchangeStatusField = New Structure;: %1
360: en : 		DataExchangeStatusField.Insert("InfobaseNode");: %1
361: en : 		DataExchangeStatusField.Insert("ActionOnExchange");: %1
362: en : 		DataExchangeStatusField.Insert("ExchangeProcessResult");: %1
363: nl : 		DataExchangeStatusField.Insert("StartDate");: %1
364: en : 		DataExchangeStatusField.Insert("EndDate");: %1
365: en : 		: %1
366: cy : 	EndIf;: %1
367: en : 	: %1
368: en : 	Return DataExchangeStatusField;: %1
369: en : 	: %1
370: en : EndFunction: %1
371: en : : %1
372: en : Function MapOfDataTypesForImport(): %1
373: en : 	: %1
374: en : 	If TypeOf(DataForImportTypeMapField) <> Type("Map") Then: %1
375: en : 		: %1
376: en : 		DataForImportTypeMapField = New Map;: %1
377: en : 		: %1
378: cy : 	EndIf;: %1
379: en : 	: %1
380: en : 	Return DataForImportTypeMapField;: %1
381: en : 	: %1
382: en : EndFunction: %1
383: en : : %1
384: en : Function DataImportToValueTableMode(): %1
385: en : 	: %1
386: en : 	Return Not DataImportToInformationBaseMode();: %1
387: en : 	: %1
388: en : EndFunction: %1
389: en : : %1
390: en : Function ColumnNameUUID(): %1
391: en : 	: %1
392: en : 	Return "UUID";: %1
393: en : 	: %1
394: en : EndFunction: %1
395: en : : %1
396: en : Function ColumnNameTypeAsString(): %1
397: en : 	: %1
398: en : 	Return "TypeAsString";: %1
399: en : 	: %1
400: en : EndFunction: %1
401: en : : %1
402: en : Function EventLogMonitorMessageKey(): %1
403: en : 	: %1
404: en : 	If TypeOf(EventLogMonitorMessageKey) <> Type("String"): %1
405: en : 		OR IsBlankString(EventLogMonitorMessageKey) Then: %1
406: en : 		: %1
407: en : 		EventLogMonitorMessageKey = DataExchangeServer.EventLogMonitorMessageTextDataExchange();: %1
408: en : 		: %1
409: cy : 	EndIf;: %1
410: en : 	: %1
411: en : 	Return EventLogMonitorMessageKey;: %1
412: en : EndFunction: %1
413: en : : %1
414: en : Function PrioritiesOfExchangeResults(): %1
415: en : 	: %1
416: en : 	If TypeOf(ExchangeResultPrioritiesField) <> Type("Array") Then: %1
417: en : 		: %1
418: en : 		ExchangeResultPrioritiesField = New Array;: %1
419: en : 		ExchangeResultPrioritiesField.Add(Enums.ExchangeExecutionResult.Error);: %1
420: en : 		ExchangeResultPrioritiesField.Add(Enums.ExchangeExecutionResult.Error_MessageTransport);: %1
421: en : 		ExchangeResultPrioritiesField.Add(Enums.ExchangeExecutionResult.Canceled);: %1
422: en : 		ExchangeResultPrioritiesField.Add(Enums.ExchangeExecutionResult.Warning_ExchangeMessageHasBeenPreviouslyReceived);: %1
423: en : 		ExchangeResultPrioritiesField.Add(Enums.ExchangeExecutionResult.CompletedWithWarnings);: %1
424: en : 		ExchangeResultPrioritiesField.Add(Enums.ExchangeExecutionResult.Completed);: %1
425: en : 		ExchangeResultPrioritiesField.Add(Undefined);: %1
426: en : 		: %1
427: cy : 	EndIf;: %1
428: en : 	: %1
429: en : 	Return ExchangeResultPrioritiesField;: %1
430: en : EndFunction: %1
431: en : : %1
432: en : Function TablesOfDescriptionsOfObjectProperties(): %1
433: en : 	: %1
434: en : 	If TypeOf(ObjectPropertyDescriptionTableField) <> Type("Map") Then: %1
435: en : 		: %1
436: en : 		ObjectPropertyDescriptionTableField = New Map;: %1
437: en : 		: %1
438: cy : 	EndIf;: %1
439: en : 	: %1
440: en : 	Return ObjectPropertyDescriptionTableField;: %1
441: en : EndFunction: %1
442: en : : %1
443: en : Function AdditionalPropertiesForDeferredPosting(): %1
444: en : 	: %1
445: en : 	If TypeOf(DocumentsMatchForDeferredPosting) <> Type("Map") Then: %1
446: en : 		: %1
447: en : 		// Initialize match for the document deferred posting.: %1
448: en : 		DocumentsMatchForDeferredPosting = New Map;: %1
449: en : 		: %1
450: cy : 	EndIf;: %1
451: en : 	: %1
452: en : 	Return DocumentsMatchForDeferredPosting;: %1
453: en : 	: %1
454: en : EndFunction: %1
455: en : : %1
456: en : Function ObjectsForPostponedRecording(): %1
457: en : 	: %1
458: en : 	If TypeOf(FieldObjectsForPostponedRecording) <> Type("Map") Then: %1
459: en : 		: %1
460: en : 		// Initialize match for the objects deferred writing.: %1
461: en : 		FieldObjectsForPostponedRecording = New Map;: %1
462: en : 		: %1
463: cy : 	EndIf;: %1
464: en : 	: %1
465: en : 	Return FieldObjectsForPostponedRecording;: %1
466: en : 	: %1
467: en : EndFunction: %1
468: en : : %1
469: en : Function ExportedObjectsByRef(): %1
470: en : 	: %1
471: en : 	If TypeOf(ExportedByRefObjectsField) <> Type("Array") Then: %1
472: en : 		: %1
473: en : 		ExportedByRefObjectsField = New Array;: %1
474: en : 		: %1
475: cy : 	EndIf;: %1
476: en : 	: %1
477: en : 	Return ExportedByRefObjectsField;: %1
478: en : EndFunction: %1
479: en : : %1
480: en : Function ObjectsCreatedAtImporting(): %1
481: en : 	: %1
482: en : 	If TypeOf(FieldObjectsCreatedAtImporting) <> Type("Array") Then: %1
483: en : 		: %1
484: en : 		FieldObjectsCreatedAtImporting = New Array;: %1
485: en : 		: %1
486: cy : 	EndIf;: %1
487: en : 	: %1
488: en : 	Return FieldObjectsCreatedAtImporting;: %1
489: en : EndFunction: %1
490: en : : %1
491: en : Function MetadataObjectsToExportByRef(): %1
492: en : 	: %1
493: en : 	If TypeOf(ExportedByRefMetadataObjectsField) <> Type("Map") Then: %1
494: en : 		: %1
495: en : 		ExportedByRefMetadataObjectsField = New Map;: %1
496: en : 		: %1
497: cy : 	EndIf;: %1
498: en : 	: %1
499: en : 	Return ExportedByRefMetadataObjectsField;: %1
500: en : EndFunction: %1
501: en : : %1
502: en : Function ExportObjectByRef(Object, ExchangePlanNode): %1
503: en : 	: %1
504: en : 	MetadataObject = Metadata.FindByType(TypeOf(Object));: %1
505: en : 	: %1
506: en : 	If MetadataObject = Undefined Then: %1
507: en : 		Return False;: %1
508: cy : 	EndIf;: %1
509: en : 	: %1
510: en : 	// get value from cache: %1
511: en : 	Result = MetadataObjectsToExportByRef().Get(MetadataObject);: %1
512: en : 	: %1
513: en : 	If Result = Undefined Then: %1
514: en : 		: %1
515: en : 		Result = False;: %1
516: en : 		: %1
517: en : 		// Get a flag showing export by reference.: %1
518: en : 		Filter = New Structure("MetadataObjectName", MetadataObject.FullName());: %1
519: en : 		: %1
520: en : 		RuleArray = ObjectRegistrationRules(ExchangePlanNode).FindRows(Filter);: %1
521: en : 		: %1
522: en : 		For Each Rule IN RuleArray Do: %1
523: en : 			: %1
524: en : 			If Not IsBlankString(Rule.FlagAttributeName) Then: %1
525: en : 				: %1
526: en : 				FlagAttributeValue = Undefined;: %1
527: en : 				ExchangePlanNodeProperties(ExchangePlanNode).Property(Rule.FlagAttributeName, FlagAttributeValue);: %1
528: en : 				: %1
529: en : 				Result = Result OR ( FlagAttributeValue = Enums.ExchangeObjectsExportModes.ExportIfNecessary: %1
530: en : 										OR FlagAttributeValue = Enums.ExchangeObjectsExportModes.EmptyRef());: %1
531: en : 				//: %1
532: en : 				If Result Then: %1
533: en : 					Break;: %1
534: cy : 				EndIf;: %1
535: en : 				: %1
536: cy : 			EndIf;: %1
537: en : 			: %1
538: et : 		EndDo;: %1
539: en : 		: %1
540: en : 		// Save the final value to cache.: %1
541: en : 		MetadataObjectsToExportByRef().Insert(MetadataObject, Result);: %1
542: en : 		: %1
543: cy : 	EndIf;: %1
544: en : 	: %1
545: en : 	Return Result;: %1
546: en : EndFunction: %1
547: en : : %1
548: en : Function ExchangePlanName(): %1
549: en : 	: %1
550: en : 	If TypeOf(ExchangePlanNameField) <> Type("String"): %1
551: en : 		OR IsBlankString(ExchangePlanNameField) Then: %1
552: en : 		: %1
553: en : 		If ValueIsFilled(NodeForExchange) Then: %1
554: en : 			: %1
555: en : 			ExchangePlanNameField = DataExchangeReUse.GetExchangePlanName(NodeForExchange);: %1
556: en : 			: %1
557: en : 		ElsIf ValueIsFilled(ExchangeNodeForDataImport) Then: %1
558: en : 			: %1
559: en : 			ExchangePlanNameField = DataExchangeReUse.GetExchangePlanName(ExchangeNodeForDataImport);: %1
560: en : 			: %1
561: en : 		ElsIf ValueIsFilled(ExchangePlanNameVRO) Then: %1
562: en : 			: %1
563: en : 			ExchangePlanNameField = ExchangePlanNameVRO;: %1
564: en : 			: %1
565: en : 		Else: %1
566: en : 			: %1
567: en : 			ExchangePlanNameField = "";: %1
568: en : 			: %1
569: cy : 		EndIf;: %1
570: en : 		: %1
571: cy : 	EndIf;: %1
572: en : 	: %1
573: en : 	Return ExchangePlanNameField;: %1
574: en : EndFunction: %1
575: en : : %1
576: en : Function ExchangePlanNodeProperties(Node): %1
577: en : 	: %1
578: en : 	If TypeOf(ExchangePlanNodePropertyField) <> Type("Structure") Then: %1
579: en : 		: %1
580: en : 		ExchangePlanNodePropertyField = New Structure;: %1
581: en : 		: %1
582: en : 		// get names of the attributes: %1
583: en : 		AttributeNames = CommonUse.NamesOfAttributesByType(Node, Type("EnumRef.ExchangeObjectsExportModes"));: %1
584: en : 		: %1
585: en : 		// Get the attributes values.: %1
586: en : 		If Not IsBlankString(AttributeNames) Then: %1
587: en : 			: %1
588: en : 			ExchangePlanNodePropertyField = CommonUse.ObjectAttributesValues(Node, AttributeNames);: %1
589: en : 			: %1
590: cy : 		EndIf;: %1
591: en : 		: %1
592: cy : 	EndIf;: %1
593: en : 	: %1
594: en : 	Return ExchangePlanNodePropertyField;: %1
595: en : EndFunction: %1
596: en : : %1
597: en : Function VersionOfIncomeExchangeEventFormat(): %1
598: en : 	: %1
599: en : 	If TypeOf(IncomingExchangeMessageFormatVersionField) <> Type("String") Then: %1
600: en : 		: %1
601: en : 		IncomingExchangeMessageFormatVersionField = "0.0.0.0";: %1
602: en : 		: %1
603: cy : 	EndIf;: %1
604: en : 	: %1
605: en : 	// Expand version of the incoming message format up to 4 digits.: %1
606: en : 	VersionDigits = StringFunctionsClientServer.DecomposeStringIntoSubstringsArray(IncomingExchangeMessageFormatVersionField, ".");: %1
607: en : 	: %1
608: en : 	If VersionDigits.Count() < 4 Then: %1
609: en : 		: %1
610: en : 		DigitCountAdd = 4 - VersionDigits.Count();: %1
611: en : 		: %1
612: en : 		For A = 1 To DigitCountAdd Do: %1
613: en : 			: %1
614: en : 			VersionDigits.Add("0");: %1
615: en : 			: %1
616: et : 		EndDo;: %1
617: en : 		: %1
618: en : 		IncomingExchangeMessageFormatVersionField = StringFunctionsClientServer.RowFromArraySubrows(VersionDigits, ".");: %1
619: en : 		: %1
620: cy : 	EndIf;: %1
621: en : 	: %1
622: en : 	Return IncomingExchangeMessageFormatVersionField;: %1
623: en : EndFunction: %1
624: en : : %1
625: en : Function MessageNo(): %1
626: en : 	: %1
627: en : 	If TypeOf(MessageNumberField) <> Type("Number") Then: %1
628: en : 		: %1
629: en : 		MessageNumberField = 0;: %1
630: en : 		: %1
631: cy : 	EndIf;: %1
632: en : 	: %1
633: en : 	Return MessageNumberField;: %1
634: en : 	: %1
635: en : EndFunction: %1
636: en : : %1
637: en : ////////////////////////////////////////////////////////////////////////////////: %1
638: en : // CACHING FUNCTIONS: %1
639: en : : %1
640: en : Function TableOfDescriptionOfObjectProperties(MetadataObject): %1
641: en : 	: %1
642: en : 	Result = TablesOfDescriptionsOfObjectProperties().Get(MetadataObject);: %1
643: en : 	: %1
644: en : 	If Result = Undefined Then: %1
645: en : 		: %1
646: en : 		Result = CommonUse.GetTableOfDescriptionOfObjectProperties(MetadataObject, "Name");: %1
647: en : 		: %1
648: en : 		TablesOfDescriptionsOfObjectProperties().Insert(Result);: %1
649: en : 		: %1
650: cy : 	EndIf;: %1
651: en : 	: %1
652: en : 	Return Result;: %1
653: en : EndFunction: %1
654: en : : %1
655: en : Function ObjectRegistrationRules(ExchangePlanNode): %1
656: en : 	: %1
657: en : 	If TypeOf(ObjectChangeRecordRulesField) <> Type("ValueTable") Then: %1
658: en : 		: %1
659: en : 		ObjectRegistrationRules = DataExchangeServerCall.SessionParametersObjectRegistrationRules().Get();: %1
660: en : 		: %1
661: en : 		Filter = New Structure;: %1
662: en : 		Filter.Insert("ExchangePlanName", DataExchangeReUse.GetExchangePlanName(ExchangePlanNode));: %1
663: en : 		: %1
664: en : 		ObjectChangeRecordRulesField = ObjectRegistrationRules.Copy(Filter, "MetadataObjectName, CheckBoxAttributeName");: %1
665: en : 		ObjectChangeRecordRulesField.Indexes.Add("MetadataObjectName");: %1
666: en : 		: %1
667: cy : 	EndIf;: %1
668: en : 	: %1
669: en : 	Return ObjectChangeRecordRulesField;: %1
670: en : 	: %1
671: en : EndFunction: %1
672: en : : %1
673: en : ////////////////////////////////////////////////////////////////////////////////: %1
674: en : // EXPORT PROCEDURES AND FUNCTIONS: %1
675: en : : %1
676: en : // DATA EXPORT: %1
677: en : : %1
678: en : // Data is: %1
679: en : // exported -- All objects are exported to one file.: %1
680: en : // -- The following data is exported to the file title:: %1
681: en : //  - exchange rules: %1
682: en : //  - information about data types: %1
683: en : //  - data on exchange (exchange plan name, node codes, message numbers (handshaking)).: %1
684: en : //: %1
685: en : // Parameters:: %1
686: en : // : %1
687: en : Procedure ExecuteDataExport(DataProcessorForDataImport = Undefined) Export: %1
688: en : 	: %1
689: en : 	SetFlagOfError(False);: %1
690: en : 	: %1
691: en : 	ErrorMessageStringField = "";: %1
692: en : 	DataExchangeStatusField = Undefined;: %1
693: en : 	ExchangeResultField = Undefined;: %1
694: en : 	ExportedByRefObjectsField = Undefined;: %1
695: en : 	FieldObjectsCreatedAtImporting = Undefined;: %1
696: en : 	ExportedByRefMetadataObjectsField = Undefined;: %1
697: en : 	ObjectChangeRecordRulesField = Undefined;: %1
698: en : 	ExchangePlanNodePropertyField = Undefined;: %1
699: en : 	DataImportDataProcessorField = DataProcessorForDataImport;: %1
700: en : 	: %1
701: en : 	ExchangeProtoco: %1
