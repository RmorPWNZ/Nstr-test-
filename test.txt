1:  : ï»¿#If Server Or ThickClientOrdinaryApplication Or ExternalConnection Then: %1
2:  : // USED VARIABLE NAME ABBREVIATIONS (ABBREVIATONS): %1
3:  : //  OCR  - objects conversion rule.: %1
4:  : //  PCR  - object properties conversion rule.: %1
5:  : //  PGCR - object properties group conversion rule.: %1
6:  : //  VCR  - object values conversion rule.: %1
7:  : //  DDR  - data export rule.: %1
8:  : //  DCR  - data clearing rule.: %1
9:  : // EXPORT VARIABLES: %1
10:  : Var EventLogMonitorMessageKey Export; // message string for writing errors to the events log monitor.: %1
11:  : Var ExternalConnection Export; // Contains external connection global context or Undefined.: %1
12:  : Var Queries Export; // Structure containing used queries.: %1
13:  : // HELPER MODULE VARIABLES FOR ALGORITHMS WRITING (COMMON FOR EXPORT AND UPLOAD): %1
14:  : Var Conversion; // Conversion properties structure (Name, Id, exchange event handlers).: %1
15:  : Var Algorithms; // Structure containing used algorithms.: %1
16:  : Var AdditionalInformationProcessors; // Structure containing used external data processors.: %1
17:  : Var Rules; // Structure containing references to OCR.: %1
18:  : Var Managers; // Match containing the fields Name, TypeName, RefTypeAsString, Manager, MDObject, ORC.: %1
19:  : Var ManagersForExchangePlans;: %1
20:  : Var AdditionalInformationProcessorParameters; // Structure containing parameters using external data processors.: %1
21:  : Var ParametersInitialized; // If True, then required conversion parameters are initialized.: %1
22:  : Var DataLogFile; // File for keeping data exchange protocol.: %1
23:  : Var CommentObjectProcessingFlag;: %1
24:  : // HANDLERS DEBUG VARIABLES: %1
25:  : Var ImportingHandling;: %1
26:  : Var ImportProcessing;: %1
27:  : // CHECK BOX OF GLOBAL DATA PROCESSORS PRESENSE: %1
28:  : Var HasBeforeObjectExportGlobalHandler;: %1
29:  : Var HasAfterObjectExportGlobalHandler;: %1
30:  : Var HasBeforeConvertObjectGlobalHandler;: %1
31:  : Var HasBeforeObjectImportGlobalHandler;: %1
32:  : Var HasAftertObjectImportGlobalHandler;: %1
33:  : // VARIABLES THAT ARE USED IN EXCHANGE HANDLERS (BOTH FOR IMPORT AND EXPORT): %1
34:  : Var StringType;                  // Type("String"): %1
35:  : Var BooleanType;                  // Type("Boolean"): %1
36:  : Var NumberType;                   // Type("Number"): %1
37:  : Var DateType;                    // Type("Date"): %1
38:  : Var UUIDType;                    // Type("UUID"): %1
39:  : Var ValueStorageType;       // Type("ValueStorage"): %1
40:  : Var BinaryDataType;          // Type("BinaryData"): %1
41:  : Var AccumulationRecordTypeType;   // Type("AccrualMovementKind"): %1
42:  : Var ObjectDeletionType;         // Type("ObjectRemoval"): %1
43:  : Var AccountTypeKind;                // Type("AccountType"): %1
44:  : Var TypeType;                     // Type("Type"): %1
45:  : Var MapType;            // Type("Map").: %1
46:  : Var String36Type;: %1
47:  : Var String255Type;: %1
48:  : Var MapRegisterType;: %1
49:  : Var XMLNodeTypeEndElement;: %1
50:  : Var XMLNodeTypeStartElement;: %1
51:  : Var XMLNodeTypeText;: %1
52:  : Var EmptyDateValue;: %1
53:  : Var ErrorMessages; // Matching. Key - error code, Value - error description.: %1
54:  : // EXPORT DATA PROCESSOR MODULE VARIABLES: %1
55:  : Var SnCounter;   // Number - NPP counter: %1
56:  : Var WrittenToFileNPP;: %1
57:  : Var PropertyConversionRuleTable;      // ValueTable - template to create table: %1
58:  : //                   structure by copying.: %1
59:  : Var XMLRules;                           // Xml-String containing exchange rules description.: %1
60:  : Var TypesForTargetString;: %1
61:  : Var DocumentsForDeferredPostingField; // Values table for documents posting after data import.: %1
62:  : Var DocumentsMatchForDeferredPosting; // Match for storing documents: %1
63:  : // additional properties after data import.: %1
64:  : Var FieldObjectsForPostponedRecording; // Match for writing objects of the reference types after data import.: %1
65:  : Var ExchangeFile; // Consistently written/read exchange file.: %1
66:  : // VARIABLES OF UPLOAD DATA PROCESSOR MODULE: %1
67:  : Var DeferredDocumentRegisterRecordCount;: %1
68:  : Var ExchangeFileAttributes;       // Structure. After opening the file, it contains exchange file attributes according to the format.: %1
69:  : Var LastSearchByRefNumber;: %1
70:  : Var StoredExportedObjectCountByTypes;: %1
71:  : Var AdditionalSearchParameterMap;: %1
72:  : Var TypeAndObjectNameMap;: %1
73:  : Var EmptyTypeValueMap;: %1
74:  : Var TypeDescriptionMap;: %1
75:  : Var ConversionRulesMap;                            // Match to determine object conversion rule by the object type.: %1
76:  : Var MessageNumberField;: %1
77:  : Var ReceivedMessageNumberField;: %1
78:  : Var EnableDocumentPosting;: %1
79:  : Var DataExportCallStack;: %1
80:  : Var GlobalNotWrittenObjectStack;: %1
81:  : Var DataMapForExportedItemUpdate;: %1
82:  : Var DeferredDocumentActionExecutionStartDate;: %1
83:  : Var DeferredDocumentActionExecutionEndDate;: %1
84:  : Var EventsAfterParameterImport;: %1
85:  : Var ObjectMappingRegisterManager;: %1
86:  : Var CurrentNestingLevelExportByRule;: %1
87:  : Var VisualExchangeSetupMode;: %1
88:  : Var ExchangeRuleInfoImportMode;: %1
89:  : Var SearchFieldInfoImportResultTable;: %1
90:  : Var CustomSearchFieldInfoOnDataExport;: %1
91:  : Var CustomSearchFieldInfoOnDataImport;: %1
92:  : Var InfobaseObjectMappingQuery;: %1
93:  : Var HasObjectChangeRecordDataAdjustment;: %1
94:  : Var HasObjectChangeRecordData;: %1
95:  : Var DataImportDataProcessorField;: %1
96:  : // VARIABLES FOR PROPERTY VALUES: %1
97:  : Var ErrorFlagField;: %1
98:  : Var ExchangeResultField;: %1
99:  : Var DataExchangeStatusField;: %1
100:  : Var ExchangeMessageDataTableField;  // Match with data value tables from exchange message;: %1
101:  : // Key - TypeName (String); Value - table with objects data (ValuesTable).: %1
102:  : Var PackageHeaderDataTableField; // Values table with data from file of exchange messages pack title.: %1
103:  : Var ErrorMessageStringField; // String - variable contains string with error message.: %1
104:  : Var DataForImportTypeMapField;: %1
105:  : Var ImportedObjectCounterField; // Imported objects counter.: %1
106:  : Var ExportedObjectCounterField; // Exported objects counter.: %1
107:  : Var ExchangeResultPrioritiesField; // Array - priorities of the data exchange from high to low.: %1
108:  : Var ObjectPropertyDescriptionTableField; // Map: Key - MetadataObject; Value - ValueTable -: %1
109:  : // table of metadata object properties description.: %1
110:  : Var ExportedByRefObjectsField; // Array of objects exported by reference. Array items are unique.: %1
111:  : Var FieldObjectsCreatedAtImporting; // Array of objects created during export. Array items are unique.: %1
112:  : Var ExportedByRefMetadataObjectsField; // Cache) Map: Key - MetadataObject; Value - shows: %1
113:  : // that object was exported by ref: True - you should export: %1
114:  : // object by ref, False - you should not.: %1
115:  : Var ObjectChangeRecordRulesField; // Cache) ValuesTable - contains objects registration rules: %1
116:  : // (rules only with the "Allowed objects filter" kind for the current exchange plan).: %1
117:  : Var ExchangePlanNameField;: %1
118:  : Var ExchangePlanNodePropertyField;: %1
119:  : Var IncomingExchangeMessageFormatVersionField;: %1
120:  : // EXPORT PROPERTIES: %1
121:  : #Region ServiceProceduresAndFunctions: %1
122:  : // Function-property: check box showing data exchange execution.: %1
123:  : // Returns:: %1
124:  : //  Boolean - check box of data exchange error.: %1
125:  : Function ErrorFlag() Export: %1
126:  : If TypeOf(ErrorFlagField) <> Type("Boolean") Then: %1
127:  : ErrorFlagField = False;: %1
128:  : EndIf;: %1
129:  : Return ErrorFlagField;: %1
130:  : EndFunction: %1
131:  : // Function-property: result of the data exchange.: %1
132:  : // Returns:: %1
133:  : //  EnumRef.ExchangeExecutionResult - data exchange result.: %1
134:  : Function ExchangeProcessResult() Export: %1
135:  : If TypeOf(ExchangeResultField) <> Type("EnumRef.ExchangeExecutionResult") Then: %1
136:  : ExchangeResultField = Enums.ExchangeExecutionResult.Completed;: %1
137:  : EndIf;: %1
138:  : Return ExchangeResultField;: %1
139:  : EndFunction: %1
140:  : // Function-property: result of the data exchange.: %1
141:  : // Returns:: %1
142:  : //  String - String presentation of the EnumRef.ExchangeExecutionResult enumeration value.: %1
143:  : Function ExchangeExecutionResultString() Export: %1
144:  : Return CommonUse.NameOfEnumValue(ExchangeProcessResult());: %1
145:  : EndFunction: %1
146:  : // Function property: number of the data exchange received message.: %1
147:  : // Returns:: %1
148:  : //  Number - number of the data exchange received message.: %1
149:  : Function ReceivedMessageNumber() Export: %1
150:  : If TypeOf(ReceivedMessageNumberField) <> Type("Number") Then: %1
151:  : ReceivedMessageNumberField = 0;: %1
152:  : EndIf;: %1
153:  : Return ReceivedMessageNumberField;: %1
154:  : EndFunction: %1
155:  : // Function-property: match to tables of the incoming message exchange data: %1
156:  : // Returns:: %1
157:  : //  Map - match with data tables of incoming exchange message.: %1
158:  : Function DataTablesOfExchangeMessage() Export: %1
159:  : If TypeOf(ExchangeMessageDataTableField) <> Type("Map") Then: %1
160:  : ExchangeMessageDataTableField = New Map;: %1
161:  : EndIf;: %1
162:  : Return ExchangeMessageDataTableField;: %1
163:  : EndFunction: %1
164:  : // Function-property: values table with statistical and additional information about exchange incoming message.: %1
165:  : // Returns:: %1
166:  : //  ValueTable - values table with statistical and additional information about incoming exchange message.: %1
167:  : Function DataTableOfPackageHeader() Export: %1
168:  : If TypeOf(PackageHeaderDataTableField) <> Type("ValueTable") Then: %1
169:  : PackageHeaderDataTableField = New ValueTable;: %1
170:  : Columns = PackageHeaderDataTableField.Columns;: %1
171:  : Columns.Add("ObjectTypeAsString",            deDescriptionType("String"));: %1
172:  : Columns.Add("ObjectsCountInSource", deDescriptionType("Number"));: %1
173:  : Columns.Add("SearchFields",                   deDescriptionType("String"));: %1
174:  : Columns.Add("TableFields",                  deDescriptionType("String"));: %1
175:  : Columns.Add("SourceTypeAsString", deDescriptionType("String"));: %1
176:  : Columns.Add("ReceiverTypeAsString", deDescriptionType("String"));: %1
177:  : Columns.Add("SynchronizeByID", deDescriptionType("Boolean"));: %1
178:  : Columns.Add("ThisIsObjectDeletion", deDescriptionType("Boolean"));: %1
179:  : Columns.Add("IsClassifier", deDescriptionType("Boolean"));: %1
180:  : Columns.Add("UsePreview", deDescriptionType("Boolean"));: %1
181:  : EndIf;: %1
182:  : Return PackageHeaderDataTableField;: %1
183:  : EndFunction: %1
184:  : // Function-property: row containing an error message on data exchange.: %1
185:  : // Returns:: %1
186:  : //  String - String containing a message on error occurred while data exchange.: %1
187:  : Function ErrorMessageString() Export: %1
188:  : If TypeOf(ErrorMessageStringField) <> Type("String") Then: %1
189:  : ErrorMessageStringField = "";: %1
190:  : EndIf;: %1
191:  : Return ErrorMessageStringField;: %1
192:  : EndFunction: %1
193:  : // Function-property: quantity of objects that were imported.: %1
194:  : // Returns:: %1
195:  : //  Number - objects quantity that were imported.: %1
196:  : Function CounterOfImportedObjects() Export: %1
197:  : If TypeOf(ImportedObjectCounterField) <> Type("Number") Then: %1
198:  : ImportedObjectCounterField = 0;: %1
199:  : EndIf;: %1
200:  : Return ImportedObjectCounterField;: %1
201:  : EndFunction: %1
202:  : // Function-property: quantity of objects that were exported.: %1
203:  : // Returns:: %1
204:  : //  Number - objects quantity that were exported.: %1
205:  : Function DumpedObjectsCounter() Export: %1
206:  : If TypeOf(ExportedObjectCounterField) <> Type("Number") Then: %1
207:  : ExportedObjectCounterField = 0;: %1
208:  : EndIf;: %1
209:  : Return ExportedObjectCounterField;: %1
210:  : EndFunction: %1
211:  : // INTERNAL PROPERTIES: %1
212:  : Function DataProcessorForDataImport(): %1
213:  : Return DataImportDataProcessorField;: %1
214:  : EndFunction: %1
215:  : Function IsExchangeOverExternalConnection(): %1
216:  : Return DataProcessorForDataImport() <> Undefined;: %1
217:  : EndFunction: %1
218:  : Function DataExchangeStatus(): %1
219:  : If TypeOf(DataExchangeStatusField) <> Type("Structure") Then: %1
220:  : DataExchangeStatusField = New Structure;: %1
221:  : DataExchangeStatusField.Insert("InfobaseNode");: %1
222:  : DataExchangeStatusField.Insert("ActionOnExchange");: %1
223:  : DataExchangeStatusField.Insert("ExchangeProcessResult");: %1
224:  : DataExchangeStatusField.Insert("StartDate");: %1
225:  : DataExchangeStatusField.Insert("EndDate");: %1
226:  : EndIf;: %1
227:  : Return DataExchangeStatusField;: %1
228:  : EndFunction: %1
229:  : Function MapOfDataTypesForImport(): %1
230:  : If TypeOf(DataForImportTypeMapField) <> Type("Map") Then: %1
231:  : DataForImportTypeMapField = New Map;: %1
232:  : EndIf;: %1
233:  : Return DataForImportTypeMapField;: %1
234:  : EndFunction: %1
235:  : Function DataImportToValueTableMode(): %1
236:  : Return Not DataImportToInformationBaseMode();: %1
237:  : EndFunction: %1
238:  : Function ColumnNameUUID(): %1
239:  : Return "UUID";: %1
240:  : EndFunction: %1
241:  : Function ColumnNameTypeAsString(): %1
242:  : Return "TypeAsString";: %1
243:  : EndFunction: %1
244:  : Function EventLogMonitorMessageKey(): %1
245:  : If TypeOf(EventLogMonitorMessageKey) <> Type("String"): %1
246:  : OR IsBlankString(EventLogMonitorMessageKey) Then: %1
247:  : EventLogMonitorMessageKey = DataExchangeServer.EventLogMonitorMessageTextDataExchange();: %1
248:  : EndIf;: %1
249:  : Return EventLogMonitorMessageKey;: %1
250:  : EndFunction: %1
251:  : Function PrioritiesOfExchangeResults(): %1
252:  : If TypeOf(ExchangeResultPrioritiesField) <> Type("Array") Then: %1
253:  : ExchangeResultPrioritiesField = New Array;: %1
254:  : ExchangeResultPrioritiesField.Add(Enums.ExchangeExecutionResult.Error);: %1
255:  : ExchangeResultPrioritiesField.Add(Enums.ExchangeExecutionResult.Error_MessageTransport);: %1
256:  : ExchangeResultPrioritiesField.Add(Enums.ExchangeExecutionResult.Canceled);: %1
257:  : ExchangeResultPrioritiesField.Add(Enums.ExchangeExecutionResult.Warning_ExchangeMessageHasBeenPreviouslyReceived);: %1
258:  : ExchangeResultPrioritiesField.Add(Enums.ExchangeExecutionResult.CompletedWithWarnings);: %1
259:  : ExchangeResultPrioritiesField.Add(Enums.ExchangeExecutionResult.Completed);: %1
260:  : ExchangeResultPrioritiesField.Add(Undefined);: %1
261:  : EndIf;: %1
262:  : Return ExchangeResultPrioritiesField;: %1
263:  : EndFunction: %1
264:  : Function TablesOfDescriptionsOfObjectProperties(): %1
265:  : If TypeOf(ObjectPropertyDescriptionTableField) <> Type("Map") Then: %1
266:  : ObjectPropertyDescriptionTableField = New Map;: %1
267:  : EndIf;: %1
268:  : Return ObjectPropertyDescriptionTableField;: %1
269:  : EndFunction: %1
270:  : Function AdditionalPropertiesForDeferredPosting(): %1
271:  : If TypeOf(DocumentsMatchForDeferredPosting) <> Type("Map") Then: %1
272:  : // Initialize match for the document deferred posting.: %1
273:  : DocumentsMatchForDeferredPosting = New Map;: %1
274:  : EndIf;: %1
275:  : Return DocumentsMatchForDeferredPosting;: %1
276:  : EndFunction: %1
277:  : Function ObjectsForPostponedRecording(): %1
278:  : If TypeOf(FieldObjectsForPostponedRecording) <> Type("Map") Then: %1
279:  : // Initialize match for the objects deferred writing.: %1
280:  : FieldObjectsForPostponedRecording = New Map;: %1
281:  : EndIf;: %1
282:  : Return FieldObjectsForPostponedRecording;: %1
283:  : EndFunction: %1
284:  : Function ExportedObjectsByRef(): %1
285:  : If TypeOf(ExportedByRefObjectsField) <> Type("Array") Then: %1
286:  : ExportedByRefObjectsField = New Array;: %1
287:  : EndIf;: %1
288:  : Return ExportedByRefObjectsField;: %1
289:  : EndFunction: %1
290:  : Function ObjectsCreatedAtImporting(): %1
291:  : If TypeOf(FieldObjectsCreatedAtImporting) <> Type("Array") Then: %1
292:  : FieldObjectsCreatedAtImporting = New Array;: %1
293:  : EndIf;: %1
294:  : Return FieldObjectsCreatedAtImporting;: %1
295:  : EndFunction: %1
296:  : Function MetadataObjectsToExportByRef(): %1
297:  : If TypeOf(ExportedByRefMetadataObjectsField) <> Type("Map") Then: %1
298:  : ExportedByRefMetadataObjectsField = New Map;: %1
299:  : EndIf;: %1
300:  : Return ExportedByRefMetadataObjectsField;: %1
301:  : EndFunction: %1
302:  : Function ExportObjectByRef(Object, ExchangePlanNode): %1
303:  : MetadataObject = Metadata.FindByType(TypeOf(Object));: %1
304:  : If MetadataObject = Undefined Then: %1
305:  : Return False;: %1
306:  : EndIf;: %1
307:  : // get value from cache: %1
308:  : Result = MetadataObjectsToExportByRef().Get(MetadataObject);: %1
309:  : If Result = Undefined Then: %1
310:  : Result = False;: %1
311:  : // Get a flag showing export by reference.: %1
312:  : Filter = New Structure("MetadataObjectName", MetadataObject.FullName());: %1
313:  : RuleArray = ObjectRegistrationRules(ExchangePlanNode).FindRows(Filter);: %1
314:  : For Each Rule IN RuleArray Do: %1
315:  : If Not IsBlankString(Rule.FlagAttributeName) Then: %1
316:  : FlagAttributeValue = Undefined;: %1
317:  : ExchangePlanNodeProperties(ExchangePlanNode).Property(Rule.FlagAttributeName, FlagAttributeValue);: %1
318:  : Result = Result OR ( FlagAttributeValue = Enums.ExchangeObjectsExportModes.ExportIfNecessary: %1
319:  : OR FlagAttributeValue = Enums.ExchangeObjectsExportModes.EmptyRef());: %1
320:  : If Result Then: %1
321:  : Break;: %1
322:  : EndIf;: %1
323:  : EndIf;: %1
324:  : EndDo;: %1
325:  : // Save the final value to cache.: %1
326:  : MetadataObjectsToExportByRef().Insert(MetadataObject, Result);: %1
327:  : EndIf;: %1
328:  : Return Result;: %1
329:  : EndFunction: %1
330:  : Function ExchangePlanName(): %1
331:  : If TypeOf(ExchangePlanNameField) <> Type("String"): %1
332:  : OR IsBlankString(ExchangePlanNameField) Then: %1
333:  : If ValueIsFilled(NodeForExchange) Then: %1
334:  : ExchangePlanNameField = DataExchangeReUse.GetExchangePlanName(NodeForExchange);: %1
335:  : ElsIf ValueIsFilled(ExchangeNodeForDataImport) Then: %1
336:  : ExchangePlanNameField = DataExchangeReUse.GetExchangePlanName(ExchangeNodeForDataImport);: %1
337:  : ElsIf ValueIsFilled(ExchangePlanNameVRO) Then: %1
338:  : ExchangePlanNameField = ExchangePlanNameVRO;: %1
339:  : Else: %1
340:  : ExchangePlanNameField = "";: %1
341:  : EndIf;: %1
342:  : EndIf;: %1
343:  : Return ExchangePlanNameField;: %1
344:  : EndFunction: %1
345:  : Function ExchangePlanNodeProperties(Node): %1
346:  : If TypeOf(ExchangePlanNodePropertyField) <> Type("Structure") Then: %1
347:  : ExchangePlanNodePropertyField = New Structure;: %1
348:  : // get names of the attributes: %1
349:  : AttributeNames = CommonUse.NamesOfAttributesByType(Node, Type("EnumRef.ExchangeObjectsExportModes"));: %1
350:  : // Get the attributes values.: %1
351:  : If Not IsBlankString(AttributeNames) Then: %1
352:  : ExchangePlanNodePropertyField = CommonUse.ObjectAttributesValues(Node, AttributeNames);: %1
353:  : EndIf;: %1
354:  : EndIf;: %1
355:  : Return ExchangePlanNodePropertyField;: %1
356:  : EndFunction: %1
357:  : Function VersionOfIncomeExchangeEventFormat(): %1
358:  : If TypeOf(IncomingExchangeMessageFormatVersionField) <> Type("String") Then: %1
359:  : IncomingExchangeMessageFormatVersionField = "0.0.0.0";: %1
360:  : EndIf;: %1
361:  : // Expand version of the incoming message format up to 4 digits.: %1
362:  : VersionDigits = StringFunctionsClientServer.DecomposeStringIntoSubstringsArray(IncomingExchangeMessageFormatVersionField, ".");: %1
363:  : If VersionDigits.Count() < 4 Then: %1
364:  : DigitCountAdd = 4 - VersionDigits.Count();: %1
365:  : For A = 1 To DigitCountAdd Do: %1
366:  : VersionDigits.Add("0");: %1
367:  : EndDo;: %1
368:  : IncomingExchangeMessageFormatVersionField = StringFunctionsClientServer.RowFromArraySubrows(VersionDigits, ".");: %1
369:  : EndIf;: %1
370:  : Return IncomingExchangeMessageFormatVersionField;: %1
371:  : EndFunction: %1
372:  : Function MessageNo(): %1
373:  : If TypeOf(MessageNumberField) <> Type("Number") Then: %1
374:  : MessageNumberField = 0;: %1
375:  : EndIf;: %1
376:  : Return MessageNumberField;: %1
377:  : EndFunction: %1
378:  : // CACHING FUNCTIONS: %1
379:  : Function TableOfDescriptionOfObjectProperties(MetadataObject): %1
380:  : Result = TablesOfDescriptionsOfObjectProperties().Get(MetadataObject);: %1
381:  : If Result = Undefined Then: %1
382:  : Result = CommonUse.GetTableOfDescriptionOfObjectProperties(MetadataObject, "Name");: %1
383:  : TablesOfDescriptionsOfObjectProperties().Insert(Result);: %1
384:  : EndIf;: %1
385:  : Return Result;: %1
386:  : EndFunction: %1
387:  : Function ObjectRegistrationRules(ExchangePlanNode): %1
388:  : If TypeOf(ObjectChangeRecordRulesField) <> Type("ValueTable") Then: %1
389:  : ObjectRegistrationRules = DataExchangeServerCall.SessionParametersObjectRegistrationRules().Get();: %1
390:  : Filter = New Structure;: %1
391:  : Filter.Insert("ExchangePlanName", DataExchangeReUse.GetExchangePlanName(ExchangePlanNode));: %1
392:  : ObjectChangeRecordRulesField = ObjectRegistrationRules.Copy(Filter, "MetadataObjectName, CheckBoxAttributeName");: %1
393:  : ObjectChangeRecordRulesField.Indexes.Add("MetadataObjectName");: %1
394:  : EndIf;: %1
395:  : Return ObjectChangeRecordRulesField;: %1
396:  : EndFunction: %1
397:  : // EXPORT PROCEDURES AND FUNCTIONS: %1
398:  : // DATA EXPORT: %1
399:  : // Data is: %1
400:  : // exported -- All objects are exported to one file.: %1
401:  : // -- The following data is exported to the file title:: %1
402:  : //  - exchange rules: %1
403:  : //  - information about data types: %1
404:  : //  - data on exchange (exchange plan name, node codes, message numbers (handshaking)).: %1
405:  : // Parameters:: %1
406:  : Procedure ExecuteDataExport(DataProcessorForDataImport = Undefined) Export: %1
407:  : SetFlagOfError(False);: %1
408:  : ErrorMessageStringField = "";: %1
409:  : DataExchangeStatusField = Undefined;: %1
410:  : ExchangeResultField = Undefined;: %1
411:  : ExportedByRefObjectsField = Undefined;: %1
412:  : FieldObjectsCreatedAtImporting = Undefined;: %1
413:  : ExportedByRefMetadataObjectsField = Undefined;: %1
414:  : ObjectChangeRecordRulesField = Undefined;: %1
415:  : ExchangePlanNodePropertyField = Undefined;: %1
416:  : DataImportDataProcessorField = DataProcessorForDataImport;: %1
417:  : ExchangeProtoco: %1
